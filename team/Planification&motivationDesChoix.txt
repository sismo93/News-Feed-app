    Suivi de planification et motivation des choix
    Groupe05
Itération 1 :
      Lors de cette première itération, nous avons convenu avec le client de réaliser l’histoire 4 et le début de l’histoire 11.
Implémentations des fonctionnalités : 
	Toutes les fonctionnalités ont été implémentés. Par soucis technique et de temps, nous avons limité le nombre de site source à 3 en attendant la réunion avec le client qui décidera des sources dont il souhaite importer les articles.
Difficultés rencontrées :
-Temps d’adaptation avec les outils intelliji et git.
-Quelques difficultés rencontrés pour certains membres du groupe lors de la prise en main de JavaFX et maven.
-Nous avons décidé de récupérer un article ainsi que ses informations (auteur, titre…) sans utiliser de librairie. Nous avons implémenté un parser qui récupère les informations de l’article dans le code html du site donné ==> perte de temps à l’implémenter + parser non conventionnel à tous les sites. Ce mauvais choix a été commis par manque de documentation.
Design pattern + librairies :
Nous avons utilidé le pattern DAO pour faciliter l’accès à la base de données 
Nous utilisons Sqlite pour gérer notre base de données, nous avons choisi Sqlite car elle est entièrement manipulable car l'intégralité de la base de données est stockée dans un fichier.

Itération 2 :
      	Lors de cette deuxième itération et après discussion avec le client concernant les sources des articles, nous avons convenu d’intégrer cinq sources et 10 catégories prédéfini au logiciel. Le client a souhaité que l’histoire 11 soit complètement fini ainsi que l’entièreté de l’histoire 1 et le début de l’histoire 12.
       
Implémentations des fonctionnalités + difficultés rencontrées : 
	Dans certains cas, certaines informations concernant l’articles sont absentes (auteur, mots clé). Dans ce cas, nous avons décidé de n’afficher que les informations disponible (description, source…).
	La localisation d’un article n’est jamais donnée, nous discuterons avec le client concernant ce point afin de trouver une solution qui lui convient. 
	Nous avons rencontré des difficultés pour récupérer les vidéos des articles, nous n’avons pas trouvé de solution technique à ce problème. Nous avons pris l’initiative d’implémenter une nouvelle catégorie appelée vidéo qui permettra de visionner des vidéos facilement accessibles sur internet.
Design pattern + librairies :
Jsoup : librairie qui nous permet de parser plus facilement un code html.
Flux rss : nous permet de récupérer les informations d’un article.
observer observable : pour un rafraîchissement automatique de la vue lors du changement de la mise à jour des données
Singleton : usage dans le routeur, permet de changer de vue et se charge de la logique des transitions entre les vues. 

Itération 3 :
	Lors de cette troisième itération, le client a décidé de choisir d’intégrer l’histoire 8 (Intégration avec des réseaux sociaux) à l’application en plus de certaines petites fonctionnalités.
Implémentations des fonctionnalités + difficultés rencontrées :
	Indépendamment à notre volonté, l’intégration du réseau social Facebook n’a pas été intégré. En effet, Facebook ne donne pas accès à ses informations à n’importe qui. Il faut obligatoirement faire une demande formelle en motivant sa demande (vidéos de l’application, conditions générales…) et attendre une réponse qui prend plusieurs jours (5jours minimum). En concertation avec le coach, nous avons décidé d’intégrer l’architecture de code à l’application. 
	L’intégration du réseau social Twitter a été faite ainsi que toutes les autres fonctionnalités demandées par le client.

Design pattern + librairies :

Twiiter4j : API twiiter

Itération 4 :
	Lors de cette quatrième itération, le client a décidé d’intégrer à l’application les histoires 14 (filtrage des articles sur base de la relevance géographique) et 15 (section d’aide) 

Implémentations des fonctionnalités + difficultés rencontrées :
	Le client voulait qu’on lui affiche les articles sur le lieu dont parle l’article. Nous lui avons signifié que le flux rss ne fournissait pas le lieu. Alors il a décidé qu’on lui affiche selon le lieu du journal dont provient l’article. 
	Toutes les fonctionnalités demandées par le client pour cette itération ont été implémenté. 

Design pattern + librairies :

Openstreetmap : Api qui sert à afficher une carte géographique

